openapi: 3.0.0
info:
  title: Mealplan API
  version: 1.0.0
  description: API for managing meal plans, recipes, and shopping lists

tags:
  - name: Recipes
    description: Operations related to recipes
  - name: Meals
    description: Operations related to meals
  - name: Plans
    description: Operations related to meal plans
  - name: Pantry
    description: Operations related to the pantry
  - name: ShoppingList
    description: Operations related to the shopping list
  - name: Tags
    description: Operations related to tags
  - name: Household
    description: Operations related to household management

servers:
  - url: http://localhost:8080/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

    Recipe:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        image:
          type: object
          properties:
            Valid:
              type: boolean
            String:
              type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              recipe_id:
                type: integer
                format: int64
              name:
                type: string
              amount:
                type: string
              calories:
                type: integer
                nullable: true
        steps:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              recipe_id:
                type: integer
                format: int64
              order:
                type: integer
              text:
                type: string
        tags:
          type: array
          items:
            type: string
          description: Optional tags for this recipe, always lowercase
      required:
        - name
        - description
        - slug

    Ingredient:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: number
        unit:
          type: string

    Meal:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        image:
          type: object
          properties:
            Valid:
              type: boolean
            String:
              type: string
        ingredients:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              meal_id:
                type: integer
                format: int64
              name:
                type: string
              amount:
                type: string
        steps:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              meal_id:
                type: integer
                format: int64
              order:
                type: integer
              text:
                type: string
        recipes:
          type: array
          items:
            type: object
            properties:
              meal_id:
                type: integer
                format: int64
              recipe_id:
                type: integer
                format: int64
        tags:
          type: array
          items:
            type: string
          description: Optional tags for this meal, always lowercase
      required:
        - name
        - description
        - slug

    Plan:
      type: object
      properties:
        id:
          type: integer
          format: int64
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        household_id:
          type: integer
        meals:
          type: array
          items:
            type: integer
            format: int64
      required:
        - start_date
        - end_date
        - household_id

    Pantry:
      type: object
      properties:
        id:
          type: integer
          format: uint
        household_id:
          type: integer
        items:
          type: array
          items:
            type: string
      required:
        - household_id
        - items

    ShoppingListItem: # Schema for items in the shopping list
      type: object
      properties:
        name:
          type: string
        amount:
          type: string
        checked:
          type: boolean
      required:
        - name
        - amount
        - checked

    ShoppingList: # Schema for GET response and PUT response
      type: object
      properties:
        plan: # Changed from plan_id to full Plan object
          $ref: '#/components/schemas/Plan'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItem'
      required:
        - plan # Changed from plan_id
        - ingredients

    ShoppingListUpdatePayload: # New schema for PUT request body
      type: object
      properties:
        plan_id: # Keep plan_id for the update payload, as we only need to identify the plan
          type: integer
          format: int64
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItem'
      required:
        - plan_id
        - ingredients

    HouseholdJoinCode:
      type: object
      properties:
        code:
          type: string
        household_id:
          type: integer
        expires_at:
          type: string
          format: date-time

    HouseholdJoinRequest:
      type: object
      properties:
        code:
          type: string
      required:
        - code

    HouseholdRemoveMemberRequest:
      type: object
      properties:
        user_id:
          type: string
      required:
        - user_id

paths:
  /recipes:
    get:
      tags: [Recipes]
      summary: Get all recipes
      parameters:
        - name: slug
          in: query
          description: Recipe slug to filter by
          schema:
            type: string
      responses:
        '200':
          description: List of recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Recipes]
      summary: Create a new recipe
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      amount:
                        type: string
                      calories:
                        type: integer
                        nullable: true
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      order:
                        type: integer
                      text:
                        type: string
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for this recipe, always lowercase
              required:
                - name
                - description
      responses:
        '201':
          description: Recipe created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags: [Recipes]
      summary: Get a recipe by ID
      responses:
        '200':
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Recipes]
      summary: Update a recipe
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      amount:
                        type: string
                      calories:
                        type: integer
                        nullable: true
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      order:
                        type: integer
                      text:
                        type: string
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for this recipe, always lowercase
              required:
                - name
                - description
      responses:
        '200':
          description: Recipe updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Recipes]
      summary: Delete a recipe
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Recipe deleted
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /meals:
    get:
      tags: [Meals]
      summary: Get all meals
      parameters:
        - name: slug
          in: query
          description: Meal slug to filter by
          schema:
            type: string
      responses:
        '200':
          description: List of meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '404':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Meals]
      summary: Create a new meal
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      amount:
                        type: string
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      order:
                        type: integer
                      text:
                        type: string
                recipes:
                  type: array
                  items:
                    type: object
                    properties:
                      recipe_id:
                        type: integer
                        format: int64
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for this meal, always lowercase
              required:
                - name
                - description
      responses:
        '201':
          description: Meal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /meals/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags: [Meals]
      summary: Get a meal by ID
      responses:
        '200':
          description: Meal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '404':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Meals]
      summary: Update a meal
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      amount:
                        type: string
                steps:
                  type: array
                  items:
                    type: object
                    properties:
                      order:
                        type: integer
                      text:
                        type: string
                recipes:
                  type: array
                  items:
                    type: object
                    properties:
                      recipe_id:
                        type: integer
                        format: int64
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for this meal, always lowercase
              required:
                - name
                - description
      responses:
        '200':
          description: Meal updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Meals]
      summary: Delete a meal
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Meal deleted
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plans:
    get:
      tags: [Plans]
      summary: Get all plans
      parameters:
        - name: last
          in: query
          description: Get the last plan for the authenticated user
          schema:
            type: boolean
        - name: next
          in: query
          description: Get the next plan for the authenticated user
          schema:
            type: boolean
        - name: future
          in: query
          description: Get all future plans
          schema:
            type: boolean
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Plans]
      summary: Create a new plan
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                meals:
                  type: array
                  items:
                    type: integer
                    format: int64
              required:
                - start_date
                - end_date
      responses:
        '201':
          description: Plan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Bad request - invalid dates or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plans/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags: [Plans]
      summary: Get a plan by ID
      responses:
        '200':
          description: Plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Plans]
      summary: Update a plan
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                meals:
                  type: array
                  items:
                    type: integer
                    format: int64
              required:
                - start_date
                - end_date
      responses:
        '200':
          description: Plan updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Bad request - invalid dates or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Plans]
      summary: Delete a plan
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Plan deleted
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /plans/{id}/ingredients:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags: [Plans]
      summary: Get ingredients for a plan
      responses:
        '200':
          description: List of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    amount:
                      type: string
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pantry:
    get:
      tags: [Pantry]
      summary: Get pantry contents
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pantry contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pantry'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Pantry]
      summary: Create a new pantry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: string
              required:
                - items
      responses:
        '201':
          description: Pantry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pantry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Pantry]
      summary: Update pantry contents
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: string
              required:
                - items
      responses:
        '200':
          description: Pantry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pantry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Pantry]
      summary: Clear pantry contents
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Pantry cleared
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list:
    get:
      tags: [ShoppingList]
      summary: Get the shopping list for the next plan
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Shopping list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        '400':
          description: Bad request (e.g., no next plan found, error fetching pantry)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (e.g., error fetching shopping list from DB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [ShoppingList]
      summary: Update the shopping list (item checked status)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdatePayload' # Changed to use the new payload schema
      responses:
        '200':
          description: Shopping list updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList' # Response remains the full ShoppingList
        '400':
          description: Bad request (e.g., invalid request body)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error (e.g., error updating shopping list in DB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tags:
    get:
      tags: [Tags]
      summary: Get all tags
      description: Returns a list of all tags used in recipes and meals.
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /household/join-code:
    post:
      tags: [Household]
      summary: Generate a join code for the current household
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Join code generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HouseholdJoinCode'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /household/join:
    post:
      tags: [Household]
      summary: Join a household using a join code
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdJoinRequest'
      responses:
        '204':
          description: Joined household
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /household/leave:
    post:
      tags: [Household]
      summary: Leave the current household
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Left household
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /household/remove-member:
    post:
      tags: [Household]
      summary: Remove a member from the household
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdRemoveMemberRequest'
      responses:
        '204':
          description: Member removed
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /household:
    get:
      tags: [Household]
      summary: Get the current user's household
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Household object including members
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  members:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
